import java.util.*;
import javax.xml.ws.FaultAction;
import org.omg.CORBA.PUBLIC_MEMBER;

public class EqualsTest {
	/**
	 * @param args 
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
       Employee a1 = new Employee("alice", 1000, 1820, 10, 5);
       Employee a2 = a1;
       Employee a3 = new Employee("alice", 1000, 1820, 10, 5);
       Employee bob =  new Employee("bob a", 5000, 1920,10,20);
       
		System.out.println("a1 == a2:" +(a1==a2));
		System.out.println("a1 == a3:" +(a1==a3));
		System.out.println("a1.equals(a3):"+a1.equals(a3));
		System.out.println("a1.equals(bob)" + a1.equals(bob));
		System.out.println("bob.toString():"+bob);
		
		Manager carl = new Manager("carl", 8000,1987,12,15);
		Manager boss = new Manager("carl", 8000,1987,12,15);
		
	    boss.setBonus(5000);
		System.out.println("boss.toString():"+ boss);
		System.out.println("carl.equals(boss):" + carl.equals(boss));
		System.out.println("a1.hashCode():" + a1.hashCode());
		System.out.println("a3.hashCode():" +a3.hashCode() );
        System.out.println("boss.hashCode():"+ boss.hashCode());
        System.out.println("carl.hashCode()"+ carl.hashCode());
	}
}

class Employee
{
     public Employee(String n, double s, int year, int month, int day)
     {
    	 name = n;
    	 salary = s;
    	 GregorianCalendar calendar = new GregorianCalendar(year, month-1, day);
         hireDay = calendar.getTime();
     }
     
     public String getName()
     {
    	 return name;
     }
     public double getSalary()
     {
    	 return salary;
     }
     public Date getHireDay()
     {
    	 return hireDay;
     }
     
     public void raiseSalary(double byPercent)
     {
    	 double raise = salary+byPercent/100;
    	 salary += raise;
     }
     
     public boolean equals(Object otherObject)
     {
    	 // a quick test to see if the objects are identical
    	 if(this == otherObject) return true;
        
    	 // must return false if the explicit parameter is null
    	 
    	 if(otherObject == null) return false;
    	 
    	 //if the classes don't match, they can't be equal
    	 if(getClass() != otherObject.getClass()) return false;
    	 
    	 //now we know otherObject is a non-null Employee
    	 Employee other  = (Employee) otherObject;
    	 
    	 //test whether the fields have identical values
    	 return name.equals(other.name) && salary == other.salary && hireDay.equals(other.hireDay);   	 
     }
     
     public int hashCode()
     {
    	 return 7*name.hashCode() + 11*new Double(salary).hashCode() + 13*hireDay.hashCode();
     }
     public String toString()
     {
    	 return getClass().getName() + "[name" + name + ", salary=" + salary + ",hireDay="+hireDay + "]";
     }
     
	 private String name;
	 private double salary;
	 private Date hireDay;
		
}

class Manager extends Employee
{
    public Manager (String n, double s, int year, int month, int day)
    {
    	  super(n, s, year, month, day);
    	  bonus = 0;
    }
   
    public double getSalary()
    {
    	double baseSalary = super.getSalary();
    	return baseSalary  += bonus;
    }
    public void setBonus(double b)
    {
	    	bonus = b;
	}
    
    public boolean equals(Object otherObject)
    {
    	if(!super.equals(otherObject)) return false;
    	Manager other = (Manager) otherObject;
    	return bonus == other.bonus;
    }
    
    public int hashCode()
    {
    	return super.hashCode() + 17*new Double(bonus).hashCode();
    }
    
	public String toString()
	{
		return super.toString() + "[bonus=" + bonus +  "]"; 	
	}
	
	private double bonus;
}


Result:
a1 == a2:true
a1 == a3:false
a1.equals(a3):true
a1.equals(bob)false
bob.toString():Employee[namebob a, salary=5000.0,hireDay=Wed Oct 20 00:00:00 CST 1920]
boss.toString():Manager[namecarl, salary=8000.0,hireDay=Tue Dec 15 00:00:00 CST 1987][bonus=5000.0]
carl.equals(boss):false
a1.hashCode():-195770933
a3.hashCode():-195770933
boss.hashCode():-1061698481
carl.hashCode()1959509071





