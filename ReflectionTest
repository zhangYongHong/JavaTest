package zyh;

import java.lang.annotation.Retention;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Scanner;

import javax.activation.FileDataSource;

public class ReflectionTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
    //read class name from command line args or user input
		String name;
		if(args.length > 0) name = args[0];
		else {
			Scanner in = new Scanner(System.in);
			System.out.println("Enter class name (e.g. java.util.Date)");
			name = in.next();
		}
		
		try {
			//print class name and superclass name(if != bject)
		   Class c1 = Class.forName(name);
		   Class superc1 = c1.getSuperclass();
		   String modifiers = Modifier.toString(c1.getModifiers());
		   if(modifiers.length() > 0) System.out.println(modifiers + " ");
		   System.out.println("class" + name);
		   if(superc1 != null && superc1 != Object.class) System.out.println("extends " + superc1.getName());
		   
		   System.out.print("\n{\n");
		   printConstructors(c1);
		   System.out.println();
		   printMethods(c1);
		   System.out.println();
		   printFields(c1);
		   System.out.println("}");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
}
	
/**
 * Prints all constractors of a class
 * @param c1 a class
 */
public static void printConstructors(Class c1)
{
	Constructor[ ] constructors = c1.getDeclaredConstructors();
	
	for(Constructor c : constructors)
	{
		String name = c.getName();
		System.out.print("     ");
		String modifiers = Modifier.toString(c.getModifiers());
		if(modifiers.length() > 0) System.out.print(modifiers + " ");
		System.out.print(name + "(");
		
		//print paraeter types
		Class[ ] paramTypes = c.getParameterTypes();
		for(int j=0; j<paramTypes.length; j++)
		{
		    if(j>0) System.out.print(",  ");
		    System.out.print(paramTypes[j].getName());
		}
		System.out.println(");");
	}
}

/**
 * Print all methods of a class
 * param c1 a class
 */
public static void printMethods(Class c1)
{
	Method[] methods = c1.getDeclaredMethods();
	
	for(Method m:methods)
	{
		Class retTypeClass = m.getReturnType();
		
		String name = m.getName();
		
		System.out.print("   ");
		//print modifiers, return type, and method name
		String modifiers = Modifier.toString(m.getModifiers() );
	    if(modifiers.length() > 0) System.out.print(modifiers + " ");
		System.out.print(retTypeClass.getName() + " " + name + "(");
		
		//print parameter types 
		Class[] paramTypes  = m.getParameterTypes();
		for(int j = 0; j<paramTypes.length; j++)
		{
			if(j>0) System.out.print(", ");
			System.out.print(paramTypes[j].getName());
		}
		System.out.println(");");
	}
}

/**
 * Prints all fileds of a class 
 * param c1 a class
 */
public static void printFields(Class c1)
{
    Field[ ] fields = c1.getDeclaredFields();
    
    for(Field f : fields)
    {
    	Class typeClass = f.getType();
    	String name = f.getName();
    	System.out.print("    ");
    	String modifiers = Modifier.toString(f.getModifiers() );
    	if(modifiers.length() > 0 ) System.out.print(modifiers + " ");
    	System.out.println(typeClass.getName() + " "+ name + ";");
    }
}
}


Result:
Enter class name (e.g. java.util.Date)

java.lang.Double
public final 
classjava.lang.Double
extends java.lang.Number

{
     public java.lang.Double(double);
     public java.lang.Double(java.lang.String);

   public boolean equals(java.lang.Object);
   public static java.lang.String toString(double);
   public java.lang.String toString();
   public int hashCode();
   public static native long doubleToRawLongBits(double);
   public static long doubleToLongBits(double);
   public static native double longBitsToDouble(long);
   public int compareTo(java.lang.Double);
   public volatile int compareTo(java.lang.Object);
   public byte byteValue();
   public short shortValue();
   public int intValue();
   public long longValue();
   public float floatValue();
   public double doubleValue();
   public static java.lang.Double valueOf(double);
   public static java.lang.Double valueOf(java.lang.String);
   public static java.lang.String toHexString(double);
   public static int compare(double, double);
   public static boolean isNaN(double);
   public boolean isNaN();
   public static boolean isInfinite(double);
   public boolean isInfinite();
   public static double parseDouble(java.lang.String);

    public static final double POSITIVE_INFINITY;
    public static final double NEGATIVE_INFINITY;
    public static final double NaN;
    public static final double MAX_VALUE;
    public static final double MIN_NORMAL;
    public static final double MIN_VALUE;
    public static final int MAX_EXPONENT;
    public static final int MIN_EXPONENT;
    public static final int SIZE;
    public static final java.lang.Class TYPE;
    private final double value;
    private static final long serialVersionUID;
}




//使用getName()得到该对象所属的类以及包

package zyh;

import org.omg.CORBA.PUBLIC_MEMBER;

class Demo{
    //other codes..	
}

public class hello {
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
       Demo demo = new Demo();
       System.out.println(demo.getClass().getName() );
	}
}

Result:
zyh.Demo


